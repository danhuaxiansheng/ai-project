# 虚拟世界生成器开发规范

## 核心职责
- 代码开发和优化
- 架构设计
- 问题诊断和修复
- 文档维护

## 基础规范

### 注释规范
```python
"""[模块名]
[简要说明]

作者：[名字]
日期：[YYYY-MM-DD]
"""

def function_name(param: type) -> return_type:
    """[函数功能简述]
    
    Args:
        param: [参数说明]
    
    Returns:
        [返回值说明]
    """
```

## 项目结构
```
virtual-world-generator/
├── apps/
│   ├── generator/         # Python 后端
│   │   ├── core/         # 核心生成逻辑
│   │   │   ├── world/    # 世界生成核心
│   │   │   ├── geography/# 地理系统
│   │   │   └── culture/  # 文明文化
│   │   ├── data/         # 数据处理
│   │   │   ├── models/   # 数据模型
│   │   │   └── schemas/  # 数据模式
│   │   ├── api/          # API 接口
│   │   └── utils/        # 工具函数
│   └── web/              # Next.js 前端
│       ├── app/          # 页面路由
│       │   ├── layout.tsx
│       │   ├── page.tsx
│       │   └── world/    # 世界相关页面
│       ├── components/   # React 组件
│       │   ├── ui/       # UI 基础组件
│       │   └── world/    # 世界相关组件
│       ├── lib/          # 工具函数
│       │   ├── api/      # API 请求
│       │   └── utils/    # 通用工具
│       └── styles/       # 样式文件
├── outputs/              # 生成结果
│   └── [timestamp]/     # 每次生成的输出
├── tests/               # 测试文件
│   ├── unit/           # 单元测试
│   └── integration/    # 集成测试
└── docs/               # 项目文档
    ├── api/            # API 文档
    └── guides/         # 使用指南
```

## 输出规范

### 数据目录
```
outputs/[timestamp]/
├── world_config.json      # 世界配置
├── world_data/           # 核心数据
│   ├── geography/        # 地理数据
│   │   ├── terrain.json  # 地形数据
│   │   ├── climate.json  # 气候数据
│   │   └── resources.json# 资源分布
│   └── civilization/     # 文明数据
│       ├── cultures.json # 文化信息
│       ├── nations.json  # 国家信息
│       └── history.json  # 历史事件
└── export/              # 导出文件
    ├── maps/           # 地图文件
    ├── documents/      # 文档文件
    └── visualizations/ # 可视化文件
```

### 核心数据格式
```json
{
    "version": "1.0.0",
    "timestamp": "YYYY-MM-DD HH:MM:SS",
    "generator_settings": {
        "seed": "string",
        "complexity": "int",
        "focus_areas": ["string"]
    },
    "world_data": {
        "geography": {},
        "civilization": {},
        "history": []
    }
}
```

## 开发流程

### 新功能开发
1. 确认需求和接口
2. 编写核心代码
3. 添加单元测试
4. 更新文档

### 问题修复
1. 复现问题
2. 定位原因
3. 修复并测试
4. 补充测试用例

## 异常处理
```python
try:
    result = generate_world(params)
except (ConfigError, ValueError) as e:
    logger.error(f"配置错误: {e}")
    raise
except GenerationError as e:
    logger.error(f"生成错误: {e}")
    raise
```

## 性能要求
- 生成响应时间 < 5s
- 内存占用 < 1GB
- 测试覆盖率 > 80%

## 工具链
- 代码格式化：black
- 类型检查：mypy
- 测试框架：pytest
- 文档生成：sphinx

## Git 工作流
- 功能分支：feature/*
- 修复分支：bugfix/*
- 提交格式：[类型] 简要说明 

## 前端开发规范

### 技术栈规范
```typescript
// Next.js 13+ App Router
// React 18+
// TypeScript 5+
// Tailwind CSS 3+
// SCSS Modules
// Shadcn/ui 组件库
```
### 组件规范
```typescript
// 组件命名：PascalCase
// components/world/WorldGenerator.tsx
import { useState } from 'react'
import styles from './WorldGenerator.module.scss'

interface WorldGeneratorProps {
  onGenerate: (params: WorldParams) => Promise<void>
}

export function WorldGenerator({ onGenerate }: WorldGeneratorProps) {
  // 组件逻辑
}
```

### 样式规范
```scss
// SCSS 模块化命名
.container {
  @apply flex flex-col gap-4;  // 优先使用 Tailwind
  
  .header {
    // 自定义样式
    &__title {
      // BEM 命名规范
    }
  }
}
```

### API 调用规范
```typescript
// lib/api/world.ts
export async function generateWorld(params: WorldParams): Promise<WorldData> {
  const response = await fetch('/api/world/generate', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(params),
  })
  
  if (!response.ok) {
    throw new Error('生成失败')
  }
  
  return response.json()
}
```

### 状态管理
```typescript
// 使用 React Context 或 Zustand
interface WorldStore {
  currentWorld: WorldData | null
  setWorld: (world: WorldData) => void
  clearWorld: () => void
}
```

### 类型定义
```typescript
// types/world.d.ts
interface WorldParams {
  seed?: string
  complexity: number
  focusAreas: string[]
  // ...其他参数
}

interface WorldData {
  id: string
  version: string
  timestamp: string
  data: {
    geography: Geography
    civilization: Civilization
    history: HistoryEvent[]
  }
}
```

### 错误处理
```typescript
try {
  const world = await generateWorld(params)
  setWorld(world)
} catch (error) {
  toast.error('世界生成失败')
  console.error(error)
}
```

### 组件交互流程
1. 参数输入
   - 表单验证
   - 实时预览
   - 参数保存

2. 生成过程
   - 加载状态
   - 进度显示
   - 取消操作

3. 结果展示
   - 数据可视化
   - 导出选项
   - 分享功能

### 性能优化
- 组件懒加载
- 图片优化
- API 缓存
- 防抖节流

### 开发工具
- ESLint + Prettier
- Husky + lint-staged
- Storybook
- Jest + React Testing Library

### 部署规范
- 环境变量配置
- 构建优化
- CI/CD 流程 